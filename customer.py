from sqlalchemy import Column,  INTEGER, VARCHAR, or_
from sqlalchemy.ext.declarative import declarative_base
#import database as db
from  database import Database
from utility import Utility as ut

from sqlalchemy.orm.exc import NoResultFound, MultipleResultsFound
Base = declarative_base()

class Customer(Base):

    """
    A class to represent a customer.

    Attributes
    ----------
    id:         customer id.  Generated by system at creation.
    name (str):          name of the customer
    address (str):       name of the customer
    customer_no (str):  customer_no of the customer.

    """

    __tablename__ = 'customer'

    id = Column(INTEGER, primary_key=True)
    name = Column(VARCHAR(60), nullable=False)
    address = Column(VARCHAR(100))


    def __init__(self, name, address=''):
        self.name, self.address = name, address

    def __repr__(self):
      return ("Customer({id}, '{name}', '{address}')".format(id=self.id, name=self.name, address=self.address))

    @staticmethod
    def f_customer_not_exist(p_name, p_addr=None):
        """search  customer in database by name and address
          Args:
            p_name (str): customer name
            p_addr (str): customer address

        Returns:
            result(boolean)
        """

        try:
            session = Database.get_session()
            rec = session.query(Customer).filter(Customer.name == p_name).filter(or_(Customer.address == p_addr,
                           p_addr == None)).one()
            return False
        except NoResultFound:
            return True
        except Exception as e:
            ut.log_exeption(e)
            return False

    @staticmethod
    def f_seek_db_by_id(p_id):
        """search  customer in database by name and address
          Args:
            p_id (int): customer id

        Returns:
            customer object (if found) or None (not found)
        """
        ut.logger_app.info(p_id)
        try:
            session = Database.get_session()
            rec = session.query(Customer).filter(Customer.id == p_id).one()
            return rec
        except Exception as e:
            ut.logger_app.info(e)
            return None


def create_customer(p_name, p_addr):
    """create customer and save to database

      Args:
        p_name
        p_addr( (Database object):

      Returns:
              True, if success
              False, if failure
    """
    # check if customer with same name and address existing
    b_c_not_exist = Customer.f_customer_not_exist(p_name, p_addr)

    if  b_c_not_exist:  #if not exist

            customer = Customer(p_name, p_addr)
            new_customer= Database.new_rec_in_db(customer)

            # db creaton succeeds
            if new_customer!=None:
                ut.print_success('customer has been created')
                ut.print_success(new_customer.id)
                print(new_customer)
                return new_customer
            # db creaton fails
            else:
                return None

    #  seeking fails, creaton aborts
    else:
           return False




if __name__ == '__main__':
    Database.initialise()
    res=create_customer('fei', 'kirkland')
    print(res)

