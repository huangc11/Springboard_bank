from sqlalchemy import Column,  INTEGER, VARCHAR, or_
from sqlalchemy.ext.declarative import declarative_base
#import database as db
from  database import Database
from utility import Utility as ut

from sqlalchemy.orm.exc import NoResultFound, MultipleResultsFound
Base = declarative_base()

class Customer(Base):

    """
    A class to represent a customer.

    Attributes
    ----------
    name (str):          name of the customer
    address (str):       name of the customer
    customer_no (str):  customer_no of the customer.

    Methods
    -------
    __init__(self, name, address='', cust_no=None):
        constructor

    new_in_db():
        create the new customer in database and return  the customer_no generated

    """

    __tablename__ = 'customer'

    customer_no= Column(INTEGER, primary_key=True)
    name = Column(VARCHAR(60), nullable=False)
    address = Column(VARCHAR(100))


    def __init__(self, name, address='', cust_no=None):
        self.cust_no, self.name, self.address = cust_no, name, address

    def set_customer_no(self,cust_no):
        self.cust_no = cust_no

    def new_in_db(self,p_db_session):
        """write this new customer to database; return customer_no

          Args:
            self : The first parameter.
            session (str): Database.session

          Returns:
            int:  customer_no(generated by database), if success
                  -1, customer already exist so action cancelled
                  -2, writing to db succeeds but can't get customer_no
                  -3, other  failures (unknown reason)
        """
        #search DB to make sure no customer with same name and address exist
        #----session = db.Database.get_session()
        session = p_db_session

        result = Customer.seek_db_by_name_addr(p_db_session, self.name, self.address)

        #if one ore morfe records found
        if result[0] ==1 or result[0] ==2:
           # ut.print_error('Customer with same info  already exist: {}'.format(result[1]))
            return (-1)


        #if such a customer not exsting in database, create the customer
        if result[0] ==-1:
            try:
                #save to database
                session.add(self)
                session.commit()

                # search db to get customer_no of the new customer
                ut.print_one('great, customoer created')
                result  =Customer.seek_db_by_name_addr(p_db_session, self.name, self.address)

                #if search succeeds, return customer_no
                if result[0]==1:
                    return result[1]
                else:
                    # if searchf fails
                    return -2

            except Exception as e:
                session.rollback()
                print(e)
                return -3

    @staticmethod
    def seek_db_by_name_addr(p_db_session, p_name, p_addr=None):
        """search one and only one customer in database by name and address; return customer_no if succeed

          Args:
            self : The first parameter.
            session (str): Database.session
            p_name (str): customer name
            p_addr (str): customer address

        Returns:
            a tuple which could have following values:
                 (1, 'customer found exising: customer_no= '+customer_no)  -- one found
                 (2, 'multiple customers found')
                 (-1, 'no one found') -- fail
                 (-2, 'unknown failure') -- fail
        """

        try:
            session = p_db_session
            rec = session.query(Customer).\
                filter(Customer.name == p_name).\
                filter(or_(Customer.address == p_addr,
                           p_addr==None)).\
                one()

            return (1, rec.customer_no)
        except MultipleResultsFound:
            return (2, '2. multiple results found')
        except NoResultFound:
            return (-1, '1.not found')
        except Exception as e:
            print(e)
            return (-2, 'unknown failure ')


    @classmethod
    def list_customer(self, session):
         for c in session.query(Customer):
            print(c.name)

    def __repr__(self):
      return ("Customer({cust_no}, '{name}', '{address}')".format(cust_no=self.cust_no, name=self.name, address=self.address))

def create_customer(p_db_session):

    name = input("Please enter the new customer's name: ")
    addr = input("Please enter the new customer's address: ")
   # option = input("Please confirm save or not: s for save, otherwise cancel: ")
   # option = input("Please confirm: S -- save M -- modify ")
    option ='s'
    if option!='s':
       c1 =None
    else:
        c1 = Customer(name, addr)

        c_no = c1.new_in_db(p_db_session)

        if c_no>0:
            print("%%%%%%%% customer has been created %%%%%%%% ")
            print("         The customer_no is: {} ".format(c_no))
        elif c_no == -1 :
            print("%%%%%%%% Customer already exist. Creation failed %%%%%%%% ")
        else:
            print("%%%%%%%% Creation failed due to unknow reason%%%%%%%% ")


    return c1


if __name__ == '__main__':
   # db.Database.initialise()
    bank_db = Database()
    #session = Database.get_session()
    db_session =bank_db.get_session()
    create_customer(db_session)

   # print(result)
    #c_no ='123'
