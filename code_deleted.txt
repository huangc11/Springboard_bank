



students_classes_association = Table('students_classes', Base.metadata,
    Column('student_id', Integer, ForeignKey('students.id')),
    Column('class_id', Integer, ForeignKey('classes.id'))
)

class Student(Base):
    __tablename__ = 'students'
    id = Column(Integer, primary_key=True)
    classes = relationship("Class", secondary=students_classes_association)

class Class(Base):
    __tablename__ = 'classes'
    id = Column(Integer, primary_key=True)
------------
class BankAccount
    def new_in_db(self):
        """write this new customer to database

          Args:
            self : The first parameter.
            p_database (Database object):

          Returns:
            a tuple as follows:
                  (1, account_no), if success
                  (-1, 'account_no alread existing ; cancelled
                  (-2, 'db failure')
        """

        session = Database.get_session()

        try:
                #write this object  to database

                session.add(self)
                session.commit()


                # if succeed
                return (1, self.account_no)

        except exc.IntegrityError:
               session.rollback()
               ut.print_one('1.Fail-- record with this primary key value exists. ')
               return (-1, '1.Fail-- record with this primary key value exists. ')


        except Exception as e:
                #Other fail
                session.rollback()
                ut.print_one('2.operation failed:'.format(e))
                return (-2, 'operation failed:')




def test_1():

    chk_account = CheckingAccount(500)
    chk_account.set_account_no(20036)
    chk_account.pr_detail()

    result = chk_account.new_in_db(bank_db)
    ut.print_one('after new_in_db')
    chk_account.pr_detail()
    ut.print_one(result)


    print( Database.update_rec_in_db(BankAccount, 155,dict_map ))



#--------------------------------
class Customer
    def set_customer_no(self,cust_no):
        self.cust_no = cust_no

    def new_in_db(self, p_db_session):
        """write this new customer to database; return customer_no

          Args:
            session (str): Database.session

          Returns:
            int:  customer_no(generated by database), if success
                  -1, customer with same information already exist. Operation bbort
                  -2, other  failures (unknown reason)
        """

        # ----session = db.Database.get_session()
       # session = p_db_session

        # search DB to  to see if any customer with same name and address existing
        #result = Customer.seek_db_by_name_addr(p_db_session, self.name, self.address)

        # if no customer with same information exsting, create the customer
        if result[0] == -1:
            try:
                # save to database
                session.add(self)
                session.commit()
                return (self.customer_no)

            except Exception as e:
                session.rollback()
                print(e)
                return -2
        elif result[0] > 0:
            return -1
        else:
            return -2


    def create_customer_db(self):
        """write this new customer to database; return customer_no

          Args:
            session (str): Database.session

          Returns
            Returen one of follwing tuples:
                    (1, id (generated by database))
                    (-1, 'Customer with same information already exist. Create aborted')
                    (-2, 'Creation failed')
        """

        # search DB to  to see if any customer with same name and address existing
        result = Customer.seek_db_by_name_addr(self.name, self.address)
        ut.print_one('seeking result')
        print(result)


        # if not found
        if result[0] == -1:
            db_result= Database.new_rec_in_db(self)
            return(db_result)
        elif  (result[0]==1 or result[0]==2):
           return (-1, 'Customer with same information already exist. Create aborted')
        else:
            return(-2, 'Creation failed')


custoomer.py:
 bank_db = Database()
    #session = Database.get_session()
    db_session =bank_db.get_session()

